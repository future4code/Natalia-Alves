// - **Exerc√≠cios de interpreta√ß√£o de c√≥digo**
    
//     Tente responder os exerc√≠cios dessa se√ß√£o sem executar o c√≥digo. Se ficar muito dif√≠cil, pode rodar no seu 
//computador **para analisar e pensar sobre o resultado.** 
    
//     1.  Leia o c√≥digo abaixo       
//         ```jsx
//         const usuarios = [
//           { nome: "Amanda Rangel", apelido: "Mandi" },
//           { nome: "La√≠s Petra", apelido: "Laura" },
//           { nome: "Let√≠cia Chijo", apelido: "Chijo" }
//         ]        
//         const novoArrayA = usuarios.map((item, index, array) => {
//            console.log(item, index, array)
//         })
//         ```       
//         a) O que vai ser impresso no console?
//  RESPOSTA: NO CONSOLE SER√ÉO IMPRESSOS OS VALORES CONTIDOS NO ARRAY, SEPARADOS POR CADA ITEM, TEREMOS DENTRO DE CADA
//  ITEM IMPRESSO O NOME E O APELIDO DE CADA UM.


        
//     2. Leia o c√≥digo abaixo
        
//         ```jsx
//         const usuarios = [
//           { nome: "Amanda Rangel", apelido: "Mandi" },
//           { nome: "La√≠s Petra", apelido: "Laura" },
//           { nome: "Let√≠cia Chijo", apelido: "Chijo" },
//         ]       
//         const novoArrayB = usuarios.map((item, index, array) => {
//            return item.nome
//         })        
//         console.log(novoArrayB)
//         ```
        
//         a) O que vai ser impresso no console?
//      RESPOSTA: SER√Å IMPRESSO NO CONSOLE NO FORMATO DE ARRAY, COM TODAS AS INFORMA√á√ïES CONTIDAS DENTRO DELE, COM A 
//      DIFEREN√áA DE QUE NESTE CASO ESTAR√ÉO CONTIDOS DENTRO DO ARRAY APENAS OS NOMES.
        


//     3. Leia o c√≥digo abaixo
        
//         ```jsx
        // const usuarios = [
        //   { nome: "Amanda Rangel", apelido: "Mandi" },
        //   { nome: "La√≠s Petra", apelido: "Laura" },
        //   { nome: "Let√≠cia Chijo", apelido: "Chijo" },
        // ]       
        // const novoArrayC = usuarios.filter((item, index, array) => {
        //    return item.apelido !== "Chijo"
        // })      
        // console.log(novoArrayC)
//         ```        
//         a) O que vai ser impresso no console?
//      RESPOSTA: NESTE CASO, NO CONSOLE SER√ÉO IMPRESSOS EM FORMA DE PROTOTIPO DE ARRAY OS DADOS, QUE DE ACORDO COM 
//      O C√ìDIGO SER√ÉO TODOS OS DADOS DE USU√ÅRIOS, EXCETO OS DADOS DE "CHIJO" (NOME E APELIDO)


        
// - **Exerc√≠cios de escrita de c√≥digo**
//     1. Dado o seguinte array de cachorrinhos que s√£o clientes de um pet shop, realize as opera√ß√µes pedidas nos 
//itens abaixo utilizando as fun√ß√µes de array **map** e **filter:**       
//         ```jsx
//         const pets = [
//            { nome: "Lupin", raca: "Salsicha"},
//            { nome: "Polly", raca: "Lhasa Apso"},
//            { nome: "Madame", raca: "Poodle"},
//            { nome: "Quentinho", raca: "Salsicha"},
//            { nome: "Fluffy", raca: "Poodle"},
//            { nome: "Caramelo", raca: "Vira-lata"},
//         ]
//         ```        
//         - ‚≠ê  Resultados esperados em cada item            
//             ```jsx
//             // item A
//             [
//               "Lupin", 
//               "Polly",
//               "Madame",
//               "Quentinho", 
//               "Fluffy", 
//               "Caramelo"
//             ]           
//             // item B
//             [
//                { nome: "Lupin", raca: "Salsicha"},
//                { nome: "Quentinho", raca: "Salsicha"}
//             ]            
//             // item C
//             [
//               "Voc√™ ganhou um cupom de desconto de 10% para tosar o/a Madame!"
//               "Voc√™ ganhou um cupom de desconto de 10% para tosar o/a Fluffy!"
//             ]
//             ```       
//         a) Crie um novo array que contenha apenas o nome dos doguinhos        
//         b) Crie um novo array apenas com os [cachorros salsicha](https://www.youtube.com/watch?v=YQ404vwjzus)       
//         c) Crie um novo array que possuir√° mensagens para enviar para todos os clientes que s√£o poodles. A mensagem 
//deve ser: "Voc√™ ganhou um cupom de desconto de 10% para tosar o/a `[NOME]`!"
        
//         - üí°  Dica           
//             Voc√™ pode encadear o uso do map e do filter

        const pets = [
           { nome: "Lupin", raca: "Salsicha"},
           { nome: "Polly", raca: "Lhasa Apso"},
           { nome: "Madame", raca: "Poodle"},
           { nome: "Quentinho", raca: "Salsicha"},
           { nome: "Fluffy", raca: "Poodle"},
           { nome: "Caramelo", raca: "Vira-lata"},
        ]
        const arrayNomesDoguinhos = pets.map((item, index, array) => {
           return item.nome
        })        
        console.log(arrayNomesDoguinhos)

        const callback = (pets, indice, array) => {
            return pets.raca === "Salsicha"
        }
        const apenasDoguinhosSalsicha = pets.filter (callback)
        console.log(apenasDoguinhosSalsicha)

        const callbackPoodle = (pets, indice, array) => {
            return pets.raca === "Poodle"
        }
        const apenasDoguinhosPoodle = pets.filter (callbackPoodle)
       
        const nomeDoDoguinhoPoodle = (item) => {
            return item.nome
        }
        const mensagemParaDonosPoodle = apenasDoguinhosPoodle.map (nomeDoDoguinhoPoodle)
        for (let poodles of mensagemParaDonosPoodle){
        console.log ("Voc√™ ganhou um cupom de desconto de 10% para tosar o/a " + (poodles) + "!")
        }
        
//     2. Dado o seguinte array de produtos, realize as opera√ß√µes pedidas nos itens abaixo utilizando as fun√ß√µes de 
//array **map** e **filter:**
        
//         ```jsx
//         const produtos = [
//            { nome: "Alface Lavada", categoria: "Hortifruti", preco: 2.5 },
//            { nome: "Guaran√° 2l", categoria: "Bebidas", preco: 7.8 },
//            { nome: "Veja Multiuso", categoria: "Limpeza", preco: 12.6 },
//            { nome: "D√∫zia de Banana", categoria: "Hortifruti", preco: 5.7 },
//            { nome: "Leite", categoria: "Bebidas", preco: 2.99 },
//            { nome: "C√¢ndida", categoria: "Limpeza", preco: 3.30 },
//            { nome: "Detergente Yp√™", categoria: "Limpeza", preco: 2.2 },
//            { nome: "Vinho Tinto", categoria: "Bebidas", preco: 55 },
//            { nome: "Berinjela kg", categoria: "Hortifruti", preco: 8.99 },
//            { nome: "Sab√£o em P√≥ Yp√™", categoria: "Limpeza", preco: 10.80 }
//         ]
//         ```        
//         - ‚≠ê  Resultados esperados em cada item            
//             ```jsx
//             // item A
//             [
//               "Alface Lavada", 
//               "Guaran√° 2l",
//               "Veja Multiuso",
//               "D√∫zia de Banana", 
//               "Leite", 
//               "C√¢ndida", 
//               "Detergente Yp√™", 
//               "Vinho Tinto", 
//               "Berinjela kg", 
//               "Sab√£o em P√≥"
//             ]            
//             // item B
//             [
//                { nome: "Alface Lavada", pre√ßo: 2.38 },
//                { nome: "Guaran√° 2l", pre√ßo: 7.41 },
//                { nome: "Veja Multiuso", pre√ßo: 11.97 },
//                { nome: "D√∫zia de Banana", pre√ßo: 5.42 },
//                { nome: "Leite", pre√ßo: 2.84 },
//                { nome: "C√¢ndida", pre√ßo: 3.14 },
//                { nome: "Detergente Yp√™", pre√ßo: 2.09 },
//                { nome: "Vinho Tinto", pre√ßo: 52.25 },
//                { nome: "Berinjela kg", pre√ßo: 8.54 },
//                { nome: "Sab√£o em P√≥ Yp√™", pre√ßo: 10.26 }
//             ]            
//             // item C
//             [
//                { nome: "Guaran√° 2l", categoria: "Bebidas", pre√ßo: 7.8 },
//                { nome: "Leite", categoria: "Bebidas", pre√ßo: 2.99 },
//                { nome: "Vinho Tinto", categoria: "Bebidas", pre√ßo: 55 }
//             ]            
//             // item D
//             [
//                { nome: "Detergente Yp√™", categoria: "Limpeza", pre√ßo: 2.2 },
//                { nome: "Sab√£o em P√≥ Yp√™", categoria: "Limpeza", pre√ßo: 10.80 }
//             ]            
//             // item E
//             [
//               "Compre Detergente Yp√™ por R$2,20",
//             	"Compre Sab√£o em P√≥ Yp√™ por R$10,80"
//             ]
//             ```        
//         a) Crie um novo array que contenha apenas o nome de cada item        
//         b) Crie um novo array que contenha um objeto com o nome e o pre√ßo de cada item, aplicando 5% de desconto 
//em todos eles        
//         c) Crie um novo array que contenha apenas os objetos da categoria Bebidas        
//         d) Crie um novo array que contenha apenas os objetos cujo nome contenha a palavra "Yp√™"        
//         - üí°  Dica            
//             Para te ajudar, voc√™ pode usar o m√©todo de stirngs chamado includes() que verifica se os caracteres 
//escolhidos fazem parte da sua string            
//             E caso n√£o se lembre como fazer isso, n√£o tenha medo de pesquisar no google!        
//         e) Crie um novo array onde cada item √© uma frase "Compre [NOME] por [PRE√áO]". Esse array deve conter frases 
//apenas dos itens cujo nome contenha a palavra "Yp√™"        
//         - üí°  Dica
//             Voc√™ pode encadear o uso do map e do filter

        const produtos = [
           { nome: "Alface Lavada", categoria: "Hortifruti", preco: 2.5 },
           { nome: "Guaran√° 2l", categoria: "Bebidas", preco: 7.8 },
           { nome: "Veja Multiuso", categoria: "Limpeza", preco: 12.6 },
           { nome: "D√∫zia de Banana", categoria: "Hortifruti", preco: 5.7 },
           { nome: "Leite", categoria: "Bebidas", preco: 2.99 },
           { nome: "C√¢ndida", categoria: "Limpeza", preco: 3.30 },
           { nome: "Detergente Yp√™", categoria: "Limpeza", preco: 2.2 },
           { nome: "Vinho Tinto", categoria: "Bebidas", preco: 55 },
           { nome: "Berinjela kg", categoria: "Hortifruti", preco: 8.99 },
           { nome: "Sab√£o em P√≥ Yp√™", categoria: "Limpeza", preco: 10.80 }
        ]

        const arrayNomesProdutos = produtos.map((item, index, array) => {
            return item.nome
         })        
         console.log(arrayNomesProdutos)

        const nomesEPre√ßos = (item, array, number) => {
            return item.nome   
        }
        const nomesEPre√ßosDois = (item, index, array) => {
            let calculoDesconto = item.preco * 0.05
            return item.preco - calculoDesconto
        }
        const nomesDesconto = produtos.map (nomesEPre√ßos)
        const precosDesconto = produtos.map (nomesEPre√ßosDois)
        console.log (nomesDesconto , precosDesconto)

        